#!/usr/bin/python

# Written by Stephen Fromm <stephenf nero net>
# (C) 2012 University of Oregon
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

__requires__ = ['SQLAlchemy >= 0.7']
import pkg_resources

import os
import json
import sys
import json
import smtplib
from optparse import OptionParser
from optparse import OptionGroup

import ansiblereport
import ansiblereport.constants as C
from ansiblereport.manager import *
from ansiblereport.model import *
from ansiblereport.utils import *
from ansiblereport.output_plugins import *

DEFAULT_LIMIT = 0

def report_tasks(options, mgr, clauses):
    ''' report on specific tasks '''
    tasks = []
    if options.age:
        age = parse_datetime_string(options.age)
        if age:
            clauses.append(AnsibleTask.timestamp > age)
    return AnsibleTask.find_tasks(mgr.session,
            limit=options.limit, clauses=clauses)

def report_playbooks(options, mgr, clauses):
    ''' report on playbook information '''
    playbooks = []
    if options.age:
        age = parse_datetime_string(options.age)
        if age:
            clauses.append(AnsiblePlaybook.starttime > age)
    return AnsiblePlaybook.get_last_n_playbooks(mgr.session,
            limit=options.limit, clauses=clauses)

def report(options, mgr, kwargs):
    ''' select information from db for reporting on '''
    clauses = []
    report = []
    report_data = ''
    if options.hostname:
        for n in options.hostname:
            clauses.append(AnsibleTask.hostname == n)
    if options.module_name:
        for n in options.module_name:
            clauses.append(AnsibleTask.module == n)
    if options.result:
        for n in options.result:
            clauses.append(AnsibleTask.result == n)
    # For now, if clauses are provided, search tasks.
    if clauses:
        data = report_tasks(options, mgr, clauses)
    else:
        data = report_playbooks(options, mgr, clauses)
    outputs = OutputPlugins([C.DEFAULT_OUTPUT_PLUGIN_PATH])
    for plugin in options.output:
        if plugin in outputs.plugins:
            outputs.plugins[plugin].do_report(data, **kwargs)
    return

def version(prog):
    return "%s %s" % (prog, ansiblereport.__version__)

def main(args):
    ''' main '''
    kwargs = {}
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage, version=version("%prog"))
    parser.add_option('-v', '--verbose', action='store_true',
                      default=C.DEFAULT_VERBOSE, help="Be verbose")
    parser.add_option('-o', '--output', metavar='OUTPUT',
                      action='append',
                      help='Output destination for report. '
                           'Default is %s.' % (
                               ', '.join(C.DEFAULT_OUTPUT)))
    parser.add_option('-e', '--extra-args', dest='extra_args',
                      action='append',
                      help='Set additional key=value variables from CLI. '
                           'These will be passed to the output plugins')
    group = OptionGroup(parser, 'Task search criteria')
    group.add_option('-m', '--module-name', dest='module_name',
                     action='append',
                     help="module name(s) to restrict report to")
    group.add_option('-n', '--hostname', dest='hostname',
                     action='append',
                     help="hostname(s) to restrict report to")
    group.add_option('-r', '--result', action='append',
                     help="results to restrict report to")
    parser.add_option_group(group)

    group = OptionGroup(parser, 'General search criteria')
    group.add_option('-l', '--limit', metavar='LIMIT',
                     default=DEFAULT_LIMIT,
                     help="limit reported events to N")
    group.add_option('--age', metavar='AGE',
                     help='Restrict report to events no older '
                          'than this date string')
    parser.add_option_group(group)
    options, args = parser.parse_args()
    if not options.output:
        options.output = C.DEFAULT_OUTPUT
    if options.extra_args:
        for arg in options.extra_args:
            (key, val) = arg.split('=', 1)
            kwargs[key] = val
    kwargs['verbose'] = options.verbose
    mgr = Manager(C.DEFAULT_DB_URI)
    report(options, mgr, kwargs)

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv[1:]))
    except KeyboardInterrupt, e:
        # Generic handler for ansible specific errors
        print >> sys.stderr, "error: %s" % str(e)
        sys.exit(1)
