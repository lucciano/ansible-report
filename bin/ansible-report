#!/usr/bin/python

# Written by Stephen Fromm <stephenf nero net>
# (C) 2012 University of Oregon
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

__requires__ = ['SQLAlchemy >= 0.7']
import pkg_resources

import os
import json
import sys
import json
import smtplib
from optparse import OptionParser

import ansiblereport
import ansiblereport.constants as C
from ansiblereport.db import *
from ansiblereport.utils import *

DEFAULT_LIMIT = 0

def get_report_task(options, task):
    brief = format_task_brief(task)
    if task.result in C.DEFAULT_TASK_WARN_RESULTS:
        return (brief, task.data)
    if task.result in C.DEFAULT_TASK_OKAY_RESULTS:
        if 'changed' in task.data and bool(task.data['changed']):
            return (brief, task.data)
        if options.verbose:
            return (brief, task.data)
    return None

def report_playbooks(options, session, clauses):
    ''' report on playbook information '''
    playbooks = []
    results = AnsiblePlaybook.get_last_n_playbooks(session,
            limit=options.limit, clauses=clauses)
    for playbook in results:
        tasks = []
        for task in playbook.tasks:
            t = get_report_task(options, task)
            if t is not None:
                tasks.append(t)
        if len(tasks) > 0:
            pb = {}
            pb['tasks'] = tasks
            pb['playbook'] = playbook
            pb['stats'] = AnsiblePlaybook.get_playbook_stats(playbook)
            playbooks.append(pb)
    return playbooks

def report(options, session):
    ''' select information from db for reporting on '''
    clauses = []
    report = []
    if options.hostname:
        for n in options.hostname:
            clauses.append(AnsibleTask.hostname == n)
    if options.module_name:
        for n in options.module_name:
            clauses.append(AnsibleTask.module == n)
    playbooks = report_playbooks(options, session, clauses)
    if not playbooks:
        return None
    report_playbook = format_playbook_report(playbooks)
    if options.screen:
        print report_playbook
    if options.email:
        email_report(report_playbook)
    return None

def version(prog):
    return "%s %s" % (prog, ansiblereport.__version__)

def main(args):
    ''' main '''
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage, version=version("%prog"))
    parser.add_option('-m', '--module-name', dest='module_name',
                      action='append',
                      help="module name(s) to restrict report to")
    parser.add_option('-n', '--hostname', dest='hostname',
                      action='append',
                      help="hostname(s) to restrict report to")
    parser.add_option('-l', '--limit', metavar='LIMIT',
                      default=DEFAULT_LIMIT,
                      help="limit reported events to N")
#    parser.add_option('--age', metavar='AGE',
#                      help='Restrict report to events no older than this')
    parser.add_option('--email', action='store_true',
                      default=False,
                      help="Send email report to configured destination")
    parser.add_option('--screen', action='store_true',
                      dest='screen', default=True,
                      help="Output log information to STDOUT")
    parser.add_option('--no-screen', action='store_false', dest='screen', 
                      help="Do not write log information to STDOUT")
    parser.add_option('-v', '--verbose', action='store_true', default=False,
                      help="Be verbose")
    options, args = parser.parse_args()
    session = init_db_session()
    report(options, session)

if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv[1:]))
    except KeyboardInterrupt, e:
        # Generic handler for ansible specific errors
        print >> sys.stderr, "error: %s" % str(e)
        sys.exit(1)
